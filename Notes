# TypeScript #
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* What is TypeScript?
-> A Javascript Superset : A language built on top of Javascript that adds new features to the language.
-> Browser doesn't understand TypeScript, so it needs to be compiled to JavaScript.
-> TS is compiled to JS, so it can run on any browser.
-> TS compiler compiles TS code to JS code.
-> TS adds types to JS, which helps in catching errors at compile time.
-> TS is a statically typed language, which means that the type of a variable is known at compile time.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Why TypeScript?
-> TypeScript is a statically typed language, which means that the type of a variable is known at compile time.
-> TypeScript is a strongly typed language, which means that types are enforced and not ignored.
-> Unwanted Behavior can be caught at compile time.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const button = document.querySelector('button')! as HTMLButtonElement;
const input1 = document.getElementById('num1')! as HTMLInputElement;
const input2 = document.getElementById('num2')! as HTMLInputElement;

function add(num1: number, num2: number) {
  return num1 + num2;
}

button.addEventListener('click', function() {
  console.log(add(+input1.value, +input2.value));
});
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* TypeScript Overview
-> TypeScript adds: Types, Classes, Interfaces, Decorators, Generics, Modules, Namespaces, etc.
-> Meta-Programming Features like Decorators.
-> Rich Configuration Options.
-> Modern JavaScript Features like ES6, ES7, ES8, ES9, ES10, ESNext.
-> Modern Tooling that helps even in non-TypeScript Projects.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Course Outline
-> TypeScript Basics
-> Compiler & Configuration
-> Working with Next-Gen JS Code
-> Classes & Interfaces
-> Advanced Types & TypeScript Features
-> Generics
-> Decorators
-> Time to Practice - Full Project
-> Working with Namespaces & Modules
-> Webpack & TypeScript
-> Third Party Libraries & TypeScript
-> React + TypeScript | NodeJS + TypeScript
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Working with Types
-> Core Types
o number -> 1, 5.3, -10 -> All numbers, no differentiation between integers or floats.
o string -> 'Hi', "Hi", `Hi` --> All text values.
o boolean -> true, false --> Just these two, no "truthy" or "falsy" values.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function add(n1: number, n2: number) {
    return n1 + n2;
}
const number1 = 5;
const number2 = 2.8;

const result = add(number1, number2); --> Add function is waiting for two numbers, so it will throw an error if we pass a string or boolean.
console.log(result);

-> The key difference is: JS uses "dynamic types" (resolved at runtime), TS uses "static types" (set during development).
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Working With Numbers, Strings & Booleans
function add(n1: number, n2: number, showResult: boolean, phrase: string) {
    const result = n1 + n2;
    if(showResult) {
        console.log(phrase + result);
    }else {
        return result;
    }
}

const number1 = 5;
const number2 = 2.8;
const printResult = true;
const resultPhrase = "The result is: ";

add(number1, number2, printResult, resultPhrase);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Type Assignment & Type Inference

let number1: number;
number1 = 5;
const number2 = 2.8;
const printResult = true;
let resultPhrase = "The result is: ";
// No need to assign the type, TypeScript will automatically assign the type.
add(number1, number2, printResult, resultPhrase);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Object Types
objects {age: 30} --> Any JavaScript object, more specific types (type of object).

const person: object = {
    name: 'Vedat',
    age: 21
}
-> But object type is not specific, so we can't access the properties of the object.

const person: {
    name: string;
    age: number;
} = {
    name: 'Vedat',
    age: 21
}

console.log(person.name);

* Nested Objects & Types
-> Of course object types can also be created for nested objects.
->Let's say you have this JavaScript object:
const product = {
  id: 'abc1',
  price: 12.99,
  tags: ['great-offer', 'hot-and-new'],
  details: {
    title: 'Red Carpet',
    description: 'A great carpet - almost brand-new!'
  }
}

-> This would be the type of such an object:
{
  id: string;
  price: number;
  tags: string[];
  details: {
    title: string;
    description: string;
  }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Array Types
Array [1, 2, 3] --> Any JavaScript array, type can be flexible or strict (regarding the element types).

const person = {
    name: 'Vedat',
    age: 21,
    hobbies: ['Sports', 'Cooking']
}

let favoriteActivities: string[];
favoriteActivities = ["Sports"];

console.log(person.name);

for(const hobby of person.hobbies) {
    console.log(hobby.toUpperCase());
    // console.log(hobby.map()) // !!! Error: Because map is can be used with arrays and 'hobby' is string not array !!!
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Working With Tuples
Tuple [1, 2] --> Fixed-length array where the type of each element is known, but need not be the same.

const person: {
    ...
    role: [number, string],
} = {
    ...
    role: [2, 'author']
}

//person.role.push("admin"); --> Push is allowed in tuples, but it is not recommended because it is not a good practice.
//person.role[1] = 10; --> Gives an error because the type of the second element is string.

//person.role = [0, 'admin']; --> This is allowed because the type of the elements are correct.
//person.role = [0, 'admin', 'user']; --> This is not allowed because the length of the tuple is fixed.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Enums
Enum enum {NEW, OLD} --> Added by TS, Automatically enumerated global constant identifiers.

enum Role {
    ADMIN = 'ADMIN',
    READ_ONLY = 100,
    AUTHOR = 101
}

const person = {
    name: 'Vedat',
    age: 21,
    hobbies: ['Sports', 'Cooking'],
    role: Role.AUTHOR
}

console.log(person);

if(person.role == Role.AUTHOR) {
    console.log('is AUTHOR');
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Any Type
Any * --> Any kind of value, no specific type assignment.
-> Dont use it, because it is not a good practice.
-> Use TS features to avoid using any type.

let favoriteActivities: any[];
favoriteActivities = ['Sports', 2, true];
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Union Types
function combine(input1: number | string, input2: number | string) {
    let result;
    if(typeof input1 === 'number' && typeof input2 === 'number') {
        result = input1 + input2;
    }else {
        result = input1.toString() + input2.toString();
    }
    return result;
}

const combinedAges = combine(30, 26);
console.log(combinedAges);

const combinedNames = combine('Max', 'Anna');
console.log(combinedNames);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Literal Types
function combine(input1: number | string, input2: number | string, resultConversion: 'as-number' | 'as-text') {
    let result;
    if(typeof input1 === 'number' && typeof input2 === 'number' || resultConversion == 'as-number') {
        result = +input1 + +input2;
    }else {
        result = input1.toString() + input2.toString();
    }
    return result;
}

const combinedAges = combine(30, 26, 'as-numbe'); --> This will throw an error because 'as-numbe' is not a valid literal type.
console.log(combinedAges);

const combinedStringAges = combine('30', '26', 'as-number');
console.log(combinedStringAges);

const combinedNames = combine('Max', 'Anna', 'as-text');
console.log(combinedNames);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Type Aliases / Custom Types
type Combinable = number | string;
type ConversionDescriptor = 'as-number' | 'as-text';

function combine(
    input1: Combinable,
    input2: Combinable,
    resultConversion: ConversionDescriptor)
    ....

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Type Aliases & Object Types
-> Type aliases can be used to "create" your own types. You're not limited to storing union types though - you can also provide an alias to a (possibly complex) object type.
-> For example:
    type User = { name: string; age: number };
    const u1: User = { name: 'Max', age: 30 }; // this works!

-> This allows you to avoid unnecessary repetition and manage types centrally.

-> For example, you can simplify this code:

function greet(user: { name: string; age: number }) {
  console.log('Hi, I am ' + user.name);
}

function isOlder(user: { name: string; age: number }, checkAge: number) {
  return checkAge > user.age;
}

To:

type User = { name: string; age: number };

function greet(user: User) {
  console.log('Hi, I am ' + user.name);
}

function isOlder(user: User, checkAge: number) {
  return checkAge > user.age;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Function Return Types & Void
-> void : No return value.
-> If you don't return anything from a function, it is void.

function add(n1: number, n2: number): number {
    return n1 + n2;
}

function printResult(num: number): void {
    console.log('Result: ' + num);
}

printResult(add(5, 12))

// let someValue: undefined;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Functions as Types
function add(n1: number, n2: number): number {
    return n1 + n2;
}
function printResult(num: number): void {
    console.log('Result: ' + num);
}
printResult(add(5, 12))

// let combinedValues: Function;
let combinedValues: (a: number, b: number) => number;
// -> combinedValues is a function that takes two parameters, both numbers, and returns a number.

combinedValues = add;
//combinedValues = printResult; --> Error: Type '(num: number) => void' is not assignable to type '(a: number, b: number) => number'.
//combinedValues = 5; -> Error: Type '5' is not assignable to type '(a: number, b: number) => number'.

console.log(combinedValues(8, 8));
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Function Types & Callbacks
...

function printResult(num: number): void {
    console.log('Result: ' + num);
}

function addAndHandle(n1: number, n2: number, cb: (num: number) => void) {
    const result = n1 + n2;
    cb(result);
}

addAndHandle(10, 20, (result) => {
    console.log(result);
})
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* The Unknown Type
-> unknown : Better than any type, because it is more restrictive.
-> It is a type-safe type, because it is not assignable to other types.
-> It is a better alternative to any type.

let userInput: unknown;
let userName: string;

userInput = 5;
userInput = 'Max';

console.log(userInput);

if(typeof userInput === 'string') {
    userName = userInput;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* The Never Type
-> never : It is a type that functions return, when they never return a value.
-> It is a type that functions return, when they throw an error.
-> It is a type that functions return, when they have an infinite loop.

function generateError(message: string, code: number): never {
    throw {message: message, errorCode: code};
    //while(true) {}
}


generateError('An error occurred!', 500);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Wrap Up
-> TypeScript adds types to JavaScript.
-> Core types in TypeScript are number, string, boolean, object, array, tuple, enum, any, unknown, never.
-> Union types, literal types, type aliases, function types, unknown types, and never types are also core types.
-> TypeScript helps you avoid errors and bugs in your code.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* TypeScript Compiler & Configuration










