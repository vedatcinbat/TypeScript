# TypeScript #
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* What is TypeScript?
-> A Javascript Superset : A language built on top of Javascript that adds new features to the language.
-> Browser doesn't understand TypeScript, so it needs to be compiled to JavaScript.
-> TS is compiled to JS, so it can run on any browser.
-> TS compiler compiles TS code to JS code.
-> TS adds types to JS, which helps in catching errors at compile time.
-> TS is a statically typed language, which means that the type of a variable is known at compile time.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Why TypeScript?
-> TypeScript is a statically typed language, which means that the type of a variable is known at compile time.
-> TypeScript is a strongly typed language, which means that types are enforced and not ignored.
-> Unwanted Behavior can be caught at compile time.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const button = document.querySelector('button')! as HTMLButtonElement;
const input1 = document.getElementById('num1')! as HTMLInputElement;
const input2 = document.getElementById('num2')! as HTMLInputElement;

function add(num1: number, num2: number) {
  return num1 + num2;
}

button.addEventListener('click', function() {
  console.log(add(+input1.value, +input2.value));
});
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* TypeScript Overview
-> TypeScript adds: Types, Classes, Interfaces, Decorators, Generics, Modules, Namespaces, etc.
-> Meta-Programming Features like Decorators.
-> Rich Configuration Options.
-> Modern JavaScript Features like ES6, ES7, ES8, ES9, ES10, ESNext.
-> Modern Tooling that helps even in non-TypeScript Projects.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Course Outline
-> TypeScript Basics
-> Compiler & Configuration
-> Working with Next-Gen JS Code
-> Classes & Interfaces
-> Advanced Types & TypeScript Features
-> Generics
-> Decorators
-> Time to Practice - Full Project
-> Working with Namespaces & Modules
-> Webpack & TypeScript
-> Third Party Libraries & TypeScript
-> React + TypeScript | NodeJS + TypeScript
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Working with Types
-> Core Types
o number -> 1, 5.3, -10 -> All numbers, no differentiation between integers or floats.
o string -> 'Hi', "Hi", `Hi` --> All text values.
o boolean -> true, false --> Just these two, no "truthy" or "falsy" values.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function add(n1: number, n2: number) {
    return n1 + n2;
}
const number1 = 5;
const number2 = 2.8;

const result = add(number1, number2); --> Add function is waiting for two numbers, so it will throw an error if we pass a string or boolean.
console.log(result);

-> The key difference is: JS uses "dynamic types" (resolved at runtime), TS uses "static types" (set during development).
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Working With Numbers, Strings & Booleans
function add(n1: number, n2: number, showResult: boolean, phrase: string) {
    const result = n1 + n2;
    if(showResult) {
        console.log(phrase + result);
    }else {
        return result;
    }
}

const number1 = 5;
const number2 = 2.8;
const printResult = true;
const resultPhrase = "The result is: ";

add(number1, number2, printResult, resultPhrase);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Type Assignment & Type Inference

let number1: number;
number1 = 5;
const number2 = 2.8;
const printResult = true;
let resultPhrase = "The result is: ";
// No need to assign the type, TypeScript will automatically assign the type.
add(number1, number2, printResult, resultPhrase);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Object Types















